
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrgScalarFieldEnum = {
  id: 'id',
  name: 'name',
  featureFlags: 'featureFlags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  aiMonthlyBudgetCents: 'aiMonthlyBudgetCents',
  aiCreditBalance: 'aiCreditBalance',
  aiPlan: 'aiPlan',
  aiAlerts: 'aiAlerts',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  subscriptionStatus: 'subscriptionStatus',
  subscriptionStartDate: 'subscriptionStartDate',
  subscriptionEndDate: 'subscriptionEndDate',
  brandConfig: 'brandConfig',
  settingsJson: 'settingsJson'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  email: 'email',
  name: 'name',
  role: 'role',
  passwordHash: 'passwordHash',
  mustChangePassword: 'mustChangePassword',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  isLocked: 'isLocked',
  lockedUntil: 'lockedUntil',
  failedLoginAttempts: 'failedLoginAttempts',
  lastFailedLogin: 'lastFailedLogin',
  lastSuccessfulLogin: 'lastSuccessfulLogin',
  lastPasswordChange: 'lastPasswordChange',
  totpSecret: 'totpSecret',
  totpEnabled: 'totpEnabled',
  backupCodesHash: 'backupCodesHash'
};

exports.Prisma.UserRecoveryCodeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  codeHash: 'codeHash',
  usedAt: 'usedAt',
  usedFrom: 'usedFrom',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.UserSecurityQuestionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  question: 'question',
  answerHash: 'answerHash',
  createdAt: 'createdAt'
};

exports.Prisma.UserBreakglassAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  orgId: 'orgId',
  encryptedEmail: 'encryptedEmail',
  encryptedPasswordHash: 'encryptedPasswordHash',
  encryptionIV: 'encryptionIV',
  createdAt: 'createdAt',
  lastActivatedAt: 'lastActivatedAt',
  activationCount: 'activationCount',
  isEnabled: 'isEnabled',
  canAutoActivate: 'canAutoActivate',
  minDelayMinutes: 'minDelayMinutes'
};

exports.Prisma.UserDeviceFingerprintScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fingerprint: 'fingerprint',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isTrusted: 'isTrusted',
  trustScore: 'trustScore',
  firstSeenAt: 'firstSeenAt',
  lastSeenAt: 'lastSeenAt',
  loginCount: 'loginCount'
};

exports.Prisma.UserLoginHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  success: 'success',
  method: 'method',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  deviceFingerprint: 'deviceFingerprint',
  riskScore: 'riskScore',
  riskFactors: 'riskFactors',
  country: 'country',
  city: 'city',
  timestamp: 'timestamp'
};

exports.Prisma.BreakglassActivationLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  orgId: 'orgId',
  reason: 'reason',
  method: 'method',
  riskScore: 'riskScore',
  riskFactors: 'riskFactors',
  delayMinutes: 'delayMinutes',
  verificationSteps: 'verificationSteps',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  success: 'success',
  errorMessage: 'errorMessage',
  notifiedAdmins: 'notifiedAdmins',
  timestamp: 'timestamp'
};

exports.Prisma.RecoveryRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  orgId: 'orgId',
  type: 'type',
  status: 'status',
  verificationToken: 'verificationToken',
  verificationCode: 'verificationCode',
  codeExpiresAt: 'codeExpiresAt',
  codeAttempts: 'codeAttempts',
  riskScore: 'riskScore',
  delayUntil: 'delayUntil',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  completedAt: 'completedAt'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  publicId: 'publicId',
  sourceType: 'sourceType',
  identityHash: 'identityHash',
  company: 'company',
  contactName: 'contactName',
  email: 'email',
  phoneE164: 'phoneE164',
  website: 'website',
  serviceCode: 'serviceCode',
  zip: 'zip',
  enrichmentJson: 'enrichmentJson',
  aiScore: 'aiScore',
  scoreFactors: 'scoreFactors',
  systemGenerated: 'systemGenerated',
  convertedAt: 'convertedAt',
  rfp: 'rfp',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  city: 'city',
  notes: 'notes',
  sourceDetail: 'sourceDetail',
  state: 'state',
  postalCode: 'postalCode',
  address: 'address',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  country: 'country'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  publicId: 'publicId',
  company: 'company',
  primaryName: 'primaryName',
  primaryEmail: 'primaryEmail',
  primaryPhone: 'primaryPhone',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OpportunityScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  customerId: 'customerId',
  valueType: 'valueType',
  estValue: 'estValue',
  stage: 'stage',
  ownerId: 'ownerId',
  sourceLeadId: 'sourceLeadId',
  classification: 'classification',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  customerId: 'customerId',
  amount: 'amount',
  status: 'status',
  issuedAt: 'issuedAt',
  items: 'items'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  invoiceId: 'invoiceId',
  amount: 'amount',
  method: 'method',
  receivedAt: 'receivedAt',
  reference: 'reference'
};

exports.Prisma.RfpScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  publicId: 'publicId',
  sourceSite: 'sourceSite',
  title: 'title',
  dueDate: 'dueDate',
  docs: 'docs',
  aiBidFit: 'aiBidFit',
  aiPriceHint: 'aiPriceHint',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  customerId: 'customerId',
  rfpId: 'rfpId',
  status: 'status',
  schedule: 'schedule',
  assignedTo: 'assignedTo',
  checklist: 'checklist',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  employeeId: 'employeeId',
  referredName: 'referredName',
  referredEmail: 'referredEmail',
  referredPhone: 'referredPhone',
  status: 'status',
  convertedAt: 'convertedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingLedgerScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  type: 'type',
  amount: 'amount',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.LeadInvoiceScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  number: 'number',
  periodFrom: 'periodFrom',
  periodTo: 'periodTo',
  status: 'status',
  subtotalCents: 'subtotalCents',
  taxCents: 'taxCents',
  totalCents: 'totalCents',
  currency: 'currency',
  stripeInvoiceId: 'stripeInvoiceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  leadCount: 'leadCount'
};

exports.Prisma.LeadInvoiceLineScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  leadId: 'leadId',
  description: 'description',
  quantity: 'quantity',
  unitPriceCents: 'unitPriceCents',
  amountCents: 'amountCents',
  source: 'source',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  actorUserId: 'actorUserId',
  entity: 'entity',
  entityId: 'entityId',
  field: 'field',
  oldValue: 'oldValue',
  newValue: 'newValue',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.RbacPermissionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.RbacRoleScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  slug: 'slug',
  isSystem: 'isSystem',
  createdAt: 'createdAt'
};

exports.Prisma.RbacRolePermissionScalarFieldEnum = {
  roleId: 'roleId',
  permissionId: 'permissionId'
};

exports.Prisma.RbacUserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  orgId: 'orgId',
  roleId: 'roleId'
};

exports.Prisma.ProviderConfigScalarFieldEnum = {
  id: 'id',
  samApiKey: 'samApiKey',
  stripeSecretKey: 'stripeSecretKey',
  otherConfig: 'otherConfig',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PricingPlanScalarFieldEnum = {
  orgId: 'orgId',
  model: 'model',
  currency: 'currency',
  unitAmount: 'unitAmount',
  tiersJson: 'tiersJson',
  includedUnits: 'includedUnits'
};

exports.Prisma.AiUsageEventScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  feature: 'feature',
  model: 'model',
  tokensIn: 'tokensIn',
  tokensOut: 'tokensOut',
  costUsd: 'costUsd',
  creditsUsed: 'creditsUsed',
  requestId: 'requestId',
  createdAt: 'createdAt'
};

exports.Prisma.AiMonthlySummaryScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  monthKey: 'monthKey',
  tokensIn: 'tokensIn',
  tokensOut: 'tokensOut',
  costUsd: 'costUsd',
  creditsUsed: 'creditsUsed',
  callCount: 'callCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  actorType: 'actorType',
  actorId: 'actorId',
  entityType: 'entityType',
  entityId: 'entityId',
  action: 'action',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  plan: 'plan',
  status: 'status',
  startedAt: 'startedAt',
  canceledAt: 'canceledAt',
  renewsAt: 'renewsAt',
  priceCents: 'priceCents',
  meta: 'meta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageMeterScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  meter: 'meter',
  quantity: 'quantity',
  windowStart: 'windowStart',
  windowEnd: 'windowEnd',
  createdAt: 'createdAt'
};

exports.Prisma.AddonPurchaseScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  sku: 'sku',
  amount: 'amount',
  status: 'status',
  purchasedAt: 'purchasedAt',
  refundedAt: 'refundedAt',
  meta: 'meta'
};

exports.Prisma.FederationKeyScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  keyId: 'keyId',
  secretHash: 'secretHash',
  scope: 'scope',
  createdAt: 'createdAt',
  disabledAt: 'disabledAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AiPlan = exports.$Enums.AiPlan = {
  BASE: 'BASE',
  PRO: 'PRO',
  ELITE: 'ELITE'
};

exports.Role = exports.$Enums.Role = {
  OWNER: 'OWNER',
  MANAGER: 'MANAGER',
  STAFF: 'STAFF',
  PROVIDER: 'PROVIDER',
  ACCOUNTANT: 'ACCOUNTANT'
};

exports.LeadSource = exports.$Enums.LeadSource = {
  COLD: 'COLD',
  HOT: 'HOT',
  RFP: 'RFP',
  MANUAL_EMPLOYEE_REFERRAL: 'MANUAL_EMPLOYEE_REFERRAL',
  MANUAL_EXISTING_CUSTOMER: 'MANUAL_EXISTING_CUSTOMER',
  MANUAL_NEW_CUSTOMER: 'MANUAL_NEW_CUSTOMER',
  MANUAL_OTHER: 'MANUAL_OTHER',
  SYSTEM: 'SYSTEM',
  EMPLOYEE_REFERRAL: 'EMPLOYEE_REFERRAL',
  MANUAL: 'MANUAL',
  LSA: 'LSA'
};

exports.LeadStatus = exports.$Enums.LeadStatus = {
  NEW: 'NEW',
  CONVERTED: 'CONVERTED'
};

exports.ValueType = exports.$Enums.ValueType = {
  RELATIONSHIP: 'RELATIONSHIP',
  JOB: 'JOB'
};

exports.LedgerType = exports.$Enums.LedgerType = {
  CONVERSION_FEE: 'CONVERSION_FEE',
  PACK_PURCHASE: 'PACK_PURCHASE'
};

exports.PricingModel = exports.$Enums.PricingModel = {
  PER_LEAD_FIXED: 'PER_LEAD_FIXED',
  TIERED: 'TIERED',
  SUBSCRIPTION: 'SUBSCRIPTION',
  HYBRID: 'HYBRID'
};

exports.Prisma.ModelName = {
  Org: 'Org',
  User: 'User',
  UserRecoveryCode: 'UserRecoveryCode',
  UserSecurityQuestion: 'UserSecurityQuestion',
  UserBreakglassAccount: 'UserBreakglassAccount',
  UserDeviceFingerprint: 'UserDeviceFingerprint',
  UserLoginHistory: 'UserLoginHistory',
  BreakglassActivationLog: 'BreakglassActivationLog',
  RecoveryRequest: 'RecoveryRequest',
  Lead: 'Lead',
  Customer: 'Customer',
  Opportunity: 'Opportunity',
  Invoice: 'Invoice',
  Payment: 'Payment',
  Rfp: 'Rfp',
  Job: 'Job',
  Referral: 'Referral',
  BillingLedger: 'BillingLedger',
  LeadInvoice: 'LeadInvoice',
  LeadInvoiceLine: 'LeadInvoiceLine',
  AuditLog: 'AuditLog',
  RbacPermission: 'RbacPermission',
  RbacRole: 'RbacRole',
  RbacRolePermission: 'RbacRolePermission',
  RbacUserRole: 'RbacUserRole',
  ProviderConfig: 'ProviderConfig',
  PricingPlan: 'PricingPlan',
  AiUsageEvent: 'AiUsageEvent',
  AiMonthlySummary: 'AiMonthlySummary',
  Activity: 'Activity',
  Subscription: 'Subscription',
  UsageMeter: 'UsageMeter',
  AddonPurchase: 'AddonPurchase',
  FederationKey: 'FederationKey'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
