
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrgScalarFieldEnum = {
  id: 'id',
  name: 'name',
  featureFlags: 'featureFlags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  industryType: 'industryType',
  naicsCode: 'naicsCode',
  sicCode: 'sicCode',
  industryConfig: 'industryConfig',
  activeCapabilities: 'activeCapabilities',
  plan: 'plan',
  industry: 'industry',
  externalCustomerId: 'externalCustomerId',
  settings: 'settings',
  aiMonthlyBudgetCents: 'aiMonthlyBudgetCents',
  aiCreditBalance: 'aiCreditBalance',
  aiPlan: 'aiPlan',
  aiAlerts: 'aiAlerts',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  subscriptionStatus: 'subscriptionStatus',
  subscriptionStartDate: 'subscriptionStartDate',
  subscriptionEndDate: 'subscriptionEndDate',
  brandConfig: 'brandConfig',
  settingsJson: 'settingsJson'
};

exports.Prisma.IndustryPackScalarFieldEnum = {
  id: 'id',
  industryCode: 'industryCode',
  displayName: 'displayName',
  description: 'description',
  naicsRanges: 'naicsRanges',
  sicRanges: 'sicRanges',
  leadFields: 'leadFields',
  workflowSteps: 'workflowSteps',
  catalogItems: 'catalogItems',
  contractTemplates: 'contractTemplates',
  complianceReqs: 'complianceReqs',
  rateCards: 'rateCards',
  formulaSet: 'formulaSet',
  measurementUnits: 'measurementUnits',
  requiredCapabilities: 'requiredCapabilities',
  optionalCapabilities: 'optionalCapabilities',
  hiddenCapabilities: 'hiddenCapabilities',
  isActive: 'isActive',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CapabilityScalarFieldEnum = {
  id: 'id',
  code: 'code',
  displayName: 'displayName',
  description: 'description',
  category: 'category',
  isCore: 'isCore',
  requiresSubscription: 'requiresSubscription',
  minimumPlan: 'minimumPlan',
  apiEndpoints: 'apiEndpoints',
  uiComponents: 'uiComponents',
  permissions: 'permissions',
  dependencies: 'dependencies',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IndustryCapabilityScalarFieldEnum = {
  id: 'id',
  industryPackId: 'industryPackId',
  capabilityId: 'capabilityId',
  isRequired: 'isRequired',
  isRecommended: 'isRecommended',
  isHidden: 'isHidden',
  defaultEnabled: 'defaultEnabled',
  industryConfig: 'industryConfig',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  email: 'email',
  name: 'name',
  role: 'role',
  passwordHash: 'passwordHash',
  mustChangePassword: 'mustChangePassword',
  emailVerified: 'emailVerified',
  status: 'status',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpiry: 'passwordResetExpiry',
  roleScope: 'roleScope',
  audience: 'audience',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  deviceInfo: 'deviceInfo',
  location: 'location',
  isActive: 'isActive',
  lastSeenAt: 'lastSeenAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.UserTwoFactorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  isEnabled: 'isEnabled',
  totpSecret: 'totpSecret',
  backupCodes: 'backupCodes',
  phoneNumber: 'phoneNumber',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProviderSettingsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  totpSecret: 'totpSecret',
  displayName: 'displayName',
  permissions: 'permissions',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  lastLoginIp: 'lastLoginIp',
  failedLoginCount: 'failedLoginCount',
  lockedUntil: 'lockedUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.ProviderAuditLogScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  action: 'action',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  sessionId: 'sessionId',
  isRecoveryMode: 'isRecoveryMode',
  timestamp: 'timestamp'
};

exports.Prisma.ThemeConfigScalarFieldEnum = {
  id: 'id',
  themeId: 'themeId',
  name: 'name',
  description: 'description',
  category: 'category',
  orgId: 'orgId',
  isGlobal: 'isGlobal',
  isActive: 'isActive',
  customColors: 'customColors',
  customPatterns: 'customPatterns',
  customTypography: 'customTypography',
  brandAssets: 'brandAssets',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.ThemeUsageScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  themeId: 'themeId',
  userId: 'userId',
  appliedAt: 'appliedAt',
  sessionId: 'sessionId',
  userAgent: 'userAgent'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  publicId: 'publicId',
  sourceType: 'sourceType',
  identityHash: 'identityHash',
  company: 'company',
  contactName: 'contactName',
  email: 'email',
  phoneE164: 'phoneE164',
  website: 'website',
  stage: 'stage',
  ownerId: 'ownerId',
  archived: 'archived',
  version: 'version',
  buId: 'buId',
  convertedToCustomerId: 'convertedToCustomerId',
  convertedToOrganizationId: 'convertedToOrganizationId',
  convertedToContactId: 'convertedToContactId',
  conversionAuditId: 'conversionAuditId',
  industryType: 'industryType',
  leadType: 'leadType',
  naicsCode: 'naicsCode',
  sicCode: 'sicCode',
  serviceCode: 'serviceCode',
  zip: 'zip',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  address: 'address',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  country: 'country',
  customFields: 'customFields',
  enrichmentJson: 'enrichmentJson',
  aiScore: 'aiScore',
  scoreFactors: 'scoreFactors',
  systemGenerated: 'systemGenerated',
  convertedAt: 'convertedAt',
  rfp: 'rfp',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  notes: 'notes',
  sourceDetail: 'sourceDetail'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  publicId: 'publicId',
  company: 'company',
  primaryName: 'primaryName',
  primaryEmail: 'primaryEmail',
  primaryPhone: 'primaryPhone',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OpportunityScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  organizationId: 'organizationId',
  customerId: 'customerId',
  valueType: 'valueType',
  estValue: 'estValue',
  stage: 'stage',
  ownerId: 'ownerId',
  sourceLeadId: 'sourceLeadId',
  classification: 'classification',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  probability: 'probability',
  closeDate: 'closeDate',
  leadId: 'leadId',
  version: 'version',
  buId: 'buId'
};

exports.Prisma.QuoteScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  opportunityId: 'opportunityId',
  customerId: 'customerId',
  title: 'title',
  description: 'description',
  items: 'items',
  subtotal: 'subtotal',
  tax: 'tax',
  total: 'total',
  status: 'status',
  validUntil: 'validUntil',
  acceptedAt: 'acceptedAt',
  rejectedAt: 'rejectedAt',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  title: 'title',
  department: 'department',
  organizationId: 'organizationId',
  isPrimary: 'isPrimary',
  mobilePhone: 'mobilePhone',
  workPhone: 'workPhone',
  fax: 'fax',
  website: 'website',
  address: 'address',
  linkedIn: 'linkedIn',
  twitter: 'twitter',
  ownerId: 'ownerId',
  source: 'source',
  status: 'status',
  notes: 'notes',
  tags: 'tags',
  customFields: 'customFields',
  version: 'version',
  buId: 'buId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastContactedAt: 'lastContactedAt'
};

exports.Prisma.CrmTaskScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  entityType: 'entityType',
  entityId: 'entityId',
  title: 'title',
  dueAt: 'dueAt',
  assigneeUserId: 'assigneeUserId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CrmNoteScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  entityType: 'entityType',
  entityId: 'entityId',
  body: 'body',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CrmFileScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  entityType: 'entityType',
  entityId: 'entityId',
  filename: 'filename',
  mimeType: 'mimeType',
  sizeBytes: 'sizeBytes',
  storageKey: 'storageKey',
  createdAt: 'createdAt'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  domain: 'domain',
  industry: 'industry',
  size: 'size',
  annualRevenue: 'annualRevenue',
  website: 'website',
  phone: 'phone',
  ownerId: 'ownerId',
  archived: 'archived',
  version: 'version',
  buId: 'buId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversionAuditScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  organizationId: 'organizationId',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  meta: 'meta',
  ip: 'ip',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  customerId: 'customerId',
  amount: 'amount',
  status: 'status',
  issuedAt: 'issuedAt',
  items: 'items'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  invoiceId: 'invoiceId',
  amount: 'amount',
  method: 'method',
  receivedAt: 'receivedAt',
  reference: 'reference'
};

exports.Prisma.RfpScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  publicId: 'publicId',
  sourceSite: 'sourceSite',
  title: 'title',
  dueDate: 'dueDate',
  docs: 'docs',
  aiBidFit: 'aiBidFit',
  aiPriceHint: 'aiPriceHint',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  customerId: 'customerId',
  rfpId: 'rfpId',
  status: 'status',
  schedule: 'schedule',
  assignedTo: 'assignedTo',
  checklist: 'checklist',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  employeeId: 'employeeId',
  referredName: 'referredName',
  referredEmail: 'referredEmail',
  referredPhone: 'referredPhone',
  status: 'status',
  convertedAt: 'convertedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingLedgerScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  type: 'type',
  amount: 'amount',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.LeadInvoiceScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  number: 'number',
  periodFrom: 'periodFrom',
  periodTo: 'periodTo',
  status: 'status',
  subtotalCents: 'subtotalCents',
  taxCents: 'taxCents',
  totalCents: 'totalCents',
  currency: 'currency',
  stripeInvoiceId: 'stripeInvoiceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  leadCount: 'leadCount'
};

exports.Prisma.LeadInvoiceLineScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  invoiceId: 'invoiceId',
  leadId: 'leadId',
  description: 'description',
  quantity: 'quantity',
  unitPriceCents: 'unitPriceCents',
  amountCents: 'amountCents',
  source: 'source',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  actorId: 'actorId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  delta: 'delta',
  createdAt: 'createdAt'
};

exports.Prisma.RbacPermissionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.RbacRoleScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  slug: 'slug',
  isSystem: 'isSystem',
  createdAt: 'createdAt'
};

exports.Prisma.RbacRolePermissionScalarFieldEnum = {
  roleId: 'roleId',
  permissionId: 'permissionId'
};

exports.Prisma.RbacUserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  orgId: 'orgId',
  roleId: 'roleId'
};

exports.Prisma.RoleVersionScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  orgId: 'orgId',
  version: 'version',
  name: 'name',
  description: 'description',
  changeReason: 'changeReason',
  changedBy: 'changedBy',
  isActive: 'isActive',
  permissions: 'permissions',
  config: 'config',
  scopeConfig: 'scopeConfig',
  createdAt: 'createdAt'
};

exports.Prisma.RoleTemplateScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  description: 'description',
  industry: 'industry',
  category: 'category',
  isSystemTemplate: 'isSystemTemplate',
  isPublic: 'isPublic',
  usageCount: 'usageCount',
  permissions: 'permissions',
  config: 'config',
  scopeConfig: 'scopeConfig',
  tags: 'tags',
  complexity: 'complexity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.PermissionBundleScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  description: 'description',
  permissions: 'permissions',
  category: 'category',
  isReusable: 'isReusable',
  usageCount: 'usageCount',
  tags: 'tags',
  color: 'color',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.RoleScopeScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  orgId: 'orgId',
  scopeType: 'scopeType',
  scopeKey: 'scopeKey',
  scopeName: 'scopeName',
  permissions: 'permissions',
  restrictions: 'restrictions',
  startDate: 'startDate',
  endDate: 'endDate',
  timeZone: 'timeZone',
  isActive: 'isActive',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.RoleReviewScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  roleId: 'roleId',
  reviewType: 'reviewType',
  status: 'status',
  reviewFrequency: 'reviewFrequency',
  nextReviewDate: 'nextReviewDate',
  lastReviewDate: 'lastReviewDate',
  reviewerId: 'reviewerId',
  approvers: 'approvers',
  findings: 'findings',
  actions: 'actions',
  riskLevel: 'riskLevel',
  complianceFramework: 'complianceFramework',
  exceptions: 'exceptions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt'
};

exports.Prisma.ProvisioningFlowScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  trigger: 'trigger',
  defaultRoles: 'defaultRoles',
  conditionalRoles: 'conditionalRoles',
  scimMapping: 'scimMapping',
  ssoGroupMapping: 'ssoGroupMapping',
  steps: 'steps',
  approvalRequired: 'approvalRequired',
  approvers: 'approvers',
  notifyUsers: 'notifyUsers',
  notifyManagers: 'notifyManagers',
  emailTemplate: 'emailTemplate',
  requireMFA: 'requireMFA',
  ipRestrictions: 'ipRestrictions',
  sessionDuration: 'sessionDuration',
  usageCount: 'usageCount',
  successRate: 'successRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.TemporaryElevationScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  requestedBy: 'requestedBy',
  approvedBy: 'approvedBy',
  targetRole: 'targetRole',
  currentRole: 'currentRole',
  reason: 'reason',
  requestedDuration: 'requestedDuration',
  actualDuration: 'actualDuration',
  status: 'status',
  requestedAt: 'requestedAt',
  approvedAt: 'approvedAt',
  activatedAt: 'activatedAt',
  expiresAt: 'expiresAt',
  terminatedAt: 'terminatedAt',
  approvalRequired: 'approvalRequired',
  autoApproved: 'autoApproved',
  emergencyAccess: 'emergencyAccess',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  grantedPermissions: 'grantedPermissions',
  previousPermissions: 'previousPermissions',
  usageTracked: 'usageTracked',
  alertsSent: 'alertsSent',
  reviewRequired: 'reviewRequired',
  terminationReason: 'terminationReason',
  terminatedBy: 'terminatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProviderConfigScalarFieldEnum = {
  id: 'id',
  samApiKey: 'samApiKey',
  stripeSecretKey: 'stripeSecretKey',
  otherConfig: 'otherConfig',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PricingPlanScalarFieldEnum = {
  orgId: 'orgId',
  model: 'model',
  currency: 'currency',
  unitAmount: 'unitAmount',
  tiersJson: 'tiersJson',
  includedUnits: 'includedUnits',
  stripePriceId: 'stripePriceId'
};

exports.Prisma.LeadActivityScalarFieldEnum = {
  id: 'id',
  leadId: 'leadId',
  orgId: 'orgId',
  userId: 'userId',
  type: 'type',
  title: 'title',
  description: 'description',
  scheduledAt: 'scheduledAt',
  completedAt: 'completedAt',
  contactMethod: 'contactMethod',
  duration: 'duration',
  attachments: 'attachments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeadTaskScalarFieldEnum = {
  id: 'id',
  leadId: 'leadId',
  orgId: 'orgId',
  assignedTo: 'assignedTo',
  createdBy: 'createdBy',
  title: 'title',
  description: 'description',
  priority: 'priority',
  status: 'status',
  dueDate: 'dueDate',
  completedAt: 'completedAt',
  reminderAt: 'reminderAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiUsageEventScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  feature: 'feature',
  model: 'model',
  tokensIn: 'tokensIn',
  tokensOut: 'tokensOut',
  costUsd: 'costUsd',
  creditsUsed: 'creditsUsed',
  requestId: 'requestId',
  createdAt: 'createdAt'
};

exports.Prisma.AiMonthlySummaryScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  monthKey: 'monthKey',
  tokensIn: 'tokensIn',
  tokensOut: 'tokensOut',
  costUsd: 'costUsd',
  creditsUsed: 'creditsUsed',
  callCount: 'callCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeProfileScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  adpWorkerId: 'adpWorkerId',
  managerId: 'managerId',
  mobilePrefs: 'mobilePrefs',
  emergencyContact: 'emergencyContact',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkOrderScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  customerId: 'customerId',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  scheduledStartAt: 'scheduledStartAt',
  scheduledEndAt: 'scheduledEndAt',
  actualStartAt: 'actualStartAt',
  actualEndAt: 'actualEndAt',
  jobSiteId: 'jobSiteId',
  estimatedValue: 'estimatedValue',
  actualCost: 'actualCost',
  pausedAt: 'pausedAt',
  resumedAt: 'resumedAt',
  pauseReason: 'pauseReason',
  completedBy: 'completedBy',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobSiteScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  latitude: 'latitude',
  longitude: 'longitude',
  radiusMeters: 'radiusMeters',
  accessInstructions: 'accessInstructions',
  emergencyContacts: 'emergencyContacts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobAssignmentScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  jobId: 'jobId',
  employeeId: 'employeeId',
  role: 'role',
  assignedAt: 'assignedAt',
  unassignedAt: 'unassignedAt'
};

exports.Prisma.TimesheetEntryScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  employeeId: 'employeeId',
  jobId: 'jobId',
  jobSiteId: 'jobSiteId',
  clockInAt: 'clockInAt',
  clockOutAt: 'clockOutAt',
  breakMinutes: 'breakMinutes',
  clockInLat: 'clockInLat',
  clockInLng: 'clockInLng',
  clockOutLat: 'clockOutLat',
  clockOutLng: 'clockOutLng',
  deviceInfo: 'deviceInfo',
  notes: 'notes',
  status: 'status',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobChecklistItemScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  jobId: 'jobId',
  title: 'title',
  description: 'description',
  required: 'required',
  sortOrder: 'sortOrder',
  status: 'status',
  completedBy: 'completedBy',
  completedAt: 'completedAt',
  notes: 'notes',
  photosCount: 'photosCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IssueReportScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  jobId: 'jobId',
  reportedBy: 'reportedBy',
  title: 'title',
  description: 'description',
  severity: 'severity',
  category: 'category',
  status: 'status',
  resolvedBy: 'resolvedBy',
  resolvedAt: 'resolvedAt',
  resolution: 'resolution',
  latitude: 'latitude',
  longitude: 'longitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MediaAssetScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  uploadedBy: 'uploadedBy',
  filename: 'filename',
  originalName: 'originalName',
  contentType: 'contentType',
  fileSize: 'fileSize',
  url: 'url',
  thumbnailUrl: 'thumbnailUrl',
  assetType: 'assetType',
  workOrderId: 'workOrderId',
  issueReportId: 'issueReportId',
  checklistItemId: 'checklistItemId',
  trainingModuleId: 'trainingModuleId',
  exifJson: 'exifJson',
  description: 'description',
  tags: 'tags',
  latitude: 'latitude',
  longitude: 'longitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingModuleScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  title: 'title',
  description: 'description',
  content: 'content',
  requiredForRoles: 'requiredForRoles',
  isActive: 'isActive',
  version: 'version',
  requiresQuiz: 'requiresQuiz',
  passingScore: 'passingScore',
  validityDays: 'validityDays',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingCompletionScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  employeeId: 'employeeId',
  moduleId: 'moduleId',
  completedAt: 'completedAt',
  score: 'score',
  passed: 'passed',
  expiresAt: 'expiresAt',
  isValid: 'isValid',
  timeSpentMinutes: 'timeSpentMinutes',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApprovalRequestScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  requestedBy: 'requestedBy',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  reason: 'reason',
  status: 'status',
  approverRoles: 'approverRoles',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  rejectedReason: 'rejectedReason',
  requestedAt: 'requestedAt',
  expiresAt: 'expiresAt',
  escalationRules: 'escalationRules'
};

exports.Prisma.SecurityIncidentScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  incidentType: 'incidentType',
  severity: 'severity',
  description: 'description',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  requestPath: 'requestPath',
  metadata: 'metadata',
  status: 'status',
  assignedTo: 'assignedTo',
  resolvedAt: 'resolvedAt',
  resolution: 'resolution',
  detectedAt: 'detectedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeviceAccessScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  userAgent: 'userAgent',
  deviceType: 'deviceType',
  deviceName: 'deviceName',
  fingerprint: 'fingerprint',
  firstSeenAt: 'firstSeenAt',
  lastSeenAt: 'lastSeenAt',
  accessCount: 'accessCount',
  isBlocked: 'isBlocked',
  lastIpAddress: 'lastIpAddress',
  lastLocation: 'lastLocation'
};

exports.Prisma.UserLockoutScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  reason: 'reason',
  lockoutType: 'lockoutType',
  severity: 'severity',
  lockedAt: 'lockedAt',
  expiresAt: 'expiresAt',
  unlockedAt: 'unlockedAt',
  unlockedBy: 'unlockedBy',
  isActive: 'isActive'
};

exports.Prisma.SecurityPolicyScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  category: 'category',
  name: 'name',
  enabled: 'enabled',
  config: 'config',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastUpdatedBy: 'lastUpdatedBy'
};

exports.Prisma.FeatureModuleScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  moduleKey: 'moduleKey',
  name: 'name',
  description: 'description',
  category: 'category',
  enabled: 'enabled',
  usageLimit: 'usageLimit',
  costPerUnit: 'costPerUnit',
  monthlyBudget: 'monthlyBudget',
  config: 'config',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeatureUsageScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  moduleId: 'moduleId',
  userId: 'userId',
  amount: 'amount',
  costCents: 'costCents',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.OrganizationBudgetScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  monthlyLimitCents: 'monthlyLimitCents',
  alertThreshold: 'alertThreshold',
  autoDisable: 'autoDisable',
  notifyOwners: 'notifyOwners',
  currentSpendCents: 'currentSpendCents',
  lastResetAt: 'lastResetAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IntegrationScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  type: 'type',
  name: 'name',
  enabled: 'enabled',
  config: 'config',
  metadata: 'metadata',
  lastSyncAt: 'lastSyncAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupportSessionScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  supportUserId: 'supportUserId',
  targetUserId: 'targetUserId',
  sessionType: 'sessionType',
  reason: 'reason',
  consentGiven: 'consentGiven',
  consentAt: 'consentAt',
  startedAt: 'startedAt',
  expiresAt: 'expiresAt',
  endedAt: 'endedAt',
  status: 'status',
  metadata: 'metadata'
};

exports.Prisma.AuditEventScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  sessionId: 'sessionId',
  action: 'action',
  target: 'target',
  targetId: 'targetId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  severity: 'severity',
  category: 'category',
  success: 'success',
  errorMessage: 'errorMessage',
  hash: 'hash',
  previousEventId: 'previousEventId',
  previousHash: 'previousHash',
  immutable: 'immutable',
  createdAt: 'createdAt'
};

exports.Prisma.AppEventScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  sessionId: 'sessionId',
  featureKey: 'featureKey',
  eventType: 'eventType',
  metadata: 'metadata',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  duration: 'duration',
  createdAt: 'createdAt'
};

exports.Prisma.FeatureRegistryScalarFieldEnum = {
  id: 'id',
  key: 'key',
  name: 'name',
  description: 'description',
  category: 'category',
  defaultEnabled: 'defaultEnabled',
  requiresPlan: 'requiresPlan',
  dependencies: 'dependencies',
  incompatible: 'incompatible',
  discoverability: 'discoverability',
  recommendWhen: 'recommendWhen',
  helpUrl: 'helpUrl',
  demoVideoUrl: 'demoVideoUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrgFeatureStateScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  featureId: 'featureId',
  enabled: 'enabled',
  enabledAt: 'enabledAt',
  enabledBy: 'enabledBy',
  config: 'config',
  firstUsedAt: 'firstUsedAt',
  lastUsedAt: 'lastUsedAt',
  usageCount: 'usageCount',
  recommended: 'recommended',
  recommendedAt: 'recommendedAt',
  recommendedBy: 'recommendedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DelegationGrantScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  granteeId: 'granteeId',
  granterId: 'granterId',
  toolId: 'toolId',
  scope: 'scope',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  revokedAt: 'revokedAt',
  revokedBy: 'revokedBy',
  usedCount: 'usedCount',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiActionLogScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  toolId: 'toolId',
  action: 'action',
  targetType: 'targetType',
  targetId: 'targetId',
  requestedBy: 'requestedBy',
  authorizedBy: 'authorizedBy',
  delegationId: 'delegationId',
  status: 'status',
  beforeState: 'beforeState',
  afterState: 'afterState',
  errorMessage: 'errorMessage',
  requestContext: 'requestContext',
  approvalMethod: 'approvalMethod',
  costCents: 'costCents',
  createdAt: 'createdAt',
  executedAt: 'executedAt'
};

exports.Prisma.AiDocChunkScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  contentType: 'contentType',
  sourceUrl: 'sourceUrl',
  featureKey: 'featureKey',
  tags: 'tags',
  version: 'version',
  embedding: 'embedding',
  tokenCount: 'tokenCount',
  isActive: 'isActive',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebhookEndpointScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  url: 'url',
  secret: 'secret',
  events: 'events',
  active: 'active',
  failureCount: 'failureCount',
  maxRetries: 'maxRetries',
  lastDeliveryAt: 'lastDeliveryAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebhookEventScalarFieldEnum = {
  id: 'id',
  type: 'type',
  data: 'data',
  orgId: 'orgId',
  timestamp: 'timestamp'
};

exports.Prisma.WebhookDeliveryScalarFieldEnum = {
  id: 'id',
  webhookEndpointId: 'webhookEndpointId',
  eventId: 'eventId',
  status: 'status',
  httpStatus: 'httpStatus',
  responseBody: 'responseBody',
  attemptCount: 'attemptCount',
  nextRetryAt: 'nextRetryAt',
  deliveredAt: 'deliveredAt',
  createdAt: 'createdAt'
};

exports.Prisma.EncryptionKeyScalarFieldEnum = {
  id: 'id',
  keyId: 'keyId',
  orgId: 'orgId',
  algorithm: 'algorithm',
  active: 'active',
  createdAt: 'createdAt',
  rotatedAt: 'rotatedAt'
};

exports.Prisma.BackupScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  type: 'type',
  status: 'status',
  size: 'size',
  checksum: 'checksum',
  encrypted: 'encrypted',
  compressed: 'compressed',
  destinations: 'destinations',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt'
};

exports.Prisma.TenantRegistrationScalarFieldEnum = {
  id: 'id',
  idempotencyKey: 'idempotencyKey',
  orgId: 'orgId',
  ownerUserId: 'ownerUserId',
  plan: 'plan',
  industry: 'industry',
  externalCustomerId: 'externalCustomerId',
  welcomeEmailQueued: 'welcomeEmailQueued',
  createdAt: 'createdAt'
};

exports.Prisma.LeadSourceConfigScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  type: 'type',
  active: 'active',
  createdAt: 'createdAt'
};

exports.Prisma.JobTemplateScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  description: 'description',
  estimatedHours: 'estimatedHours',
  active: 'active',
  createdAt: 'createdAt'
};

exports.Prisma.IdempotencyKeyScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  key: 'key',
  endpoint: 'endpoint',
  requestHash: 'requestHash',
  responseStatus: 'responseStatus',
  responseBody: 'responseBody',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.StripeEventScalarFieldEnum = {
  id: 'id',
  source: 'source',
  receivedAt: 'receivedAt'
};

exports.Prisma.TenantStripeConnectScalarFieldEnum = {
  orgId: 'orgId',
  stripeConnectedAccountId: 'stripeConnectedAccountId',
  connectStatus: 'connectStatus',
  chargesEnabled: 'chargesEnabled',
  payoutsEnabled: 'payoutsEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiPowerProfileScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  globalDefault: 'globalDefault',
  overrides: 'overrides',
  roleCeilings: 'roleCeilings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiTaskScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  agentType: 'agentType',
  actionType: 'actionType',
  role: 'role',
  powerLevel: 'powerLevel',
  tokensIn: 'tokensIn',
  tokensOut: 'tokensOut',
  rawCostCents: 'rawCostCents',
  priceCents: 'priceCents',
  status: 'status',
  errorCode: 'errorCode',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.CreditLedgerScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  amountCents: 'amountCents',
  type: 'type',
  description: 'description',
  balanceBefore: 'balanceBefore',
  balanceAfter: 'balanceAfter',
  relatedId: 'relatedId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.AIUsageLogScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  model: 'model',
  promptTokens: 'promptTokens',
  completionTokens: 'completionTokens',
  totalTokens: 'totalTokens',
  costCents: 'costCents',
  mode: 'mode',
  endpoint: 'endpoint',
  requestId: 'requestId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.UsageMeterScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  meterType: 'meterType',
  value: 'value',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.VerticalConfigScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  vertical: 'vertical',
  enabledAiTasks: 'enabledAiTasks',
  customFields: 'customFields',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrialConfigScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  trialType: 'trialType',
  trialEndsAt: 'trialEndsAt',
  aiCreditsCents: 'aiCreditsCents',
  features: 'features',
  status: 'status',
  convertedAt: 'convertedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobTicketScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  customerId: 'customerId',
  location: 'location',
  crewId: 'crewId',
  serviceType: 'serviceType',
  scheduledAt: 'scheduledAt',
  status: 'status',
  estimateId: 'estimateId',
  invoiceId: 'invoiceId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  contactId: 'contactId',
  opportunityId: 'opportunityId'
};

exports.Prisma.JobLogScalarFieldEnum = {
  id: 'id',
  jobTicketId: 'jobTicketId',
  actorId: 'actorId',
  role: 'role',
  action: 'action',
  notes: 'notes',
  photoUrl: 'photoUrl',
  partsUsed: 'partsUsed',
  syncedAt: 'syncedAt',
  createdAt: 'createdAt'
};

exports.Prisma.JobCompletionScalarFieldEnum = {
  id: 'id',
  jobTicketId: 'jobTicketId',
  completedAt: 'completedAt',
  signatureUrl: 'signatureUrl',
  aiReportUrl: 'aiReportUrl',
  aiReportText: 'aiReportText',
  createdAt: 'createdAt'
};

exports.Prisma.JobAnomalyScalarFieldEnum = {
  id: 'id',
  jobTicketId: 'jobTicketId',
  type: 'type',
  severity: 'severity',
  aiNotes: 'aiNotes',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy',
  resolution: 'resolution',
  createdAt: 'createdAt'
};

exports.Prisma.TenantDomainScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  domain: 'domain',
  subdomain: 'subdomain',
  txtRecord: 'txtRecord',
  verified: 'verified',
  verifiedAt: 'verifiedAt',
  cnameTarget: 'cnameTarget',
  sslEnabled: 'sslEnabled',
  sslIssuedAt: 'sslIssuedAt',
  status: 'status',
  activatedAt: 'activatedAt',
  suspendedAt: 'suspendedAt',
  suspensionReason: 'suspensionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantProfitabilityScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  monthlyRevenueCents: 'monthlyRevenueCents',
  creditsPurchased: 'creditsPurchased',
  aiCostCents: 'aiCostCents',
  infraCostCents: 'infraCostCents',
  storageCostCents: 'storageCostCents',
  marginPercent: 'marginPercent',
  adoptionRate: 'adoptionRate',
  avgCreditsPerUser: 'avgCreditsPerUser',
  aiRecommendations: 'aiRecommendations',
  lastAnalyzedAt: 'lastAnalyzedAt',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemNoticeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  targetAll: 'targetAll',
  targetOrgs: 'targetOrgs',
  dismissible: 'dismissible',
  priority: 'priority',
  startAt: 'startAt',
  endAt: 'endAt',
  active: 'active',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiGoldenDatasetScalarFieldEnum = {
  id: 'id',
  agentType: 'agentType',
  actionType: 'actionType',
  input: 'input',
  expectedOutput: 'expectedOutput',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiEvaluationScalarFieldEnum = {
  id: 'id',
  agentType: 'agentType',
  actionType: 'actionType',
  modelVersion: 'modelVersion',
  input: 'input',
  actualOutput: 'actualOutput',
  expectedOutput: 'expectedOutput',
  metrics: 'metrics',
  createdAt: 'createdAt'
};

exports.Prisma.AiModelVersionScalarFieldEnum = {
  id: 'id',
  agentType: 'agentType',
  version: 'version',
  modelName: 'modelName',
  config: 'config',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessUnitScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  timezone: 'timezone',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LineOfBusinessScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  buId: 'buId',
  key: 'key',
  enabled: 'enabled',
  config: 'config',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VendorRoleScalarFieldEnum = {
  id: 'id',
  key: 'key',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FleetVehicleScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  buId: 'buId',
  assetTag: 'assetTag',
  vin: 'vin',
  plate: 'plate',
  make: 'make',
  model: 'model',
  year: 'year',
  dotNumber: 'dotNumber',
  odometer: 'odometer',
  status: 'status',
  metadata: 'metadata',
  dvirStatus: 'dvirStatus',
  lastDvirAt: 'lastDvirAt',
  nextDvirDue: 'nextDvirDue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FleetMaintenanceTicketScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  vehicleId: 'vehicleId',
  openedBy: 'openedBy',
  assignedTo: 'assignedTo',
  title: 'title',
  description: 'description',
  severity: 'severity',
  status: 'status',
  dvirRef: 'dvirRef',
  openedAt: 'openedAt',
  closedAt: 'closedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IntegrationConfigScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  type: 'type',
  status: 'status',
  config: 'config',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GeotabDvirLogScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  deviceId: 'deviceId',
  driverId: 'driverId',
  vehicleRef: 'vehicleRef',
  defects: 'defects',
  certifiedAt: 'certifiedAt',
  status: 'status',
  raw: 'raw',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HolmanFuelTransactionScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  vehicleRef: 'vehicleRef',
  driverPin: 'driverPin',
  gallons: 'gallons',
  pricePerGallon: 'pricePerGallon',
  totalCents: 'totalCents',
  odometer: 'odometer',
  vendor: 'vendor',
  purchasedAt: 'purchasedAt',
  raw: 'raw',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PricingCatalogItemScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  key: 'key',
  listPriceCents: 'listPriceCents',
  adoptionDiscountEligible: 'adoptionDiscountEligible',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantEntitlementScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  key: 'key',
  enabled: 'enabled',
  quota: 'quota',
  meta: 'meta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreditsLedgerEntryScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  key: 'key',
  deltaCents: 'deltaCents',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.UsageLedgerEntryScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  key: 'key',
  quantity: 'quantity',
  costCents: 'costCents',
  context: 'context',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLog2ScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  role: 'role',
  action: 'action',
  resource: 'resource',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  entityType: 'entityType',
  entityId: 'entityId',
  userId: 'userId',
  body: 'body',
  isPinned: 'isPinned',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  entityType: 'entityType',
  entityId: 'entityId',
  userId: 'userId',
  fileName: 'fileName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  storageKey: 'storageKey',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.AssetScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  buId: 'buId',
  assetNumber: 'assetNumber',
  name: 'name',
  description: 'description',
  category: 'category',
  status: 'status',
  qrCode: 'qrCode',
  qrCodeUrl: 'qrCodeUrl',
  locationId: 'locationId',
  locationType: 'locationType',
  assignedToUserId: 'assignedToUserId',
  assignedToVehicleId: 'assignedToVehicleId',
  purchasePrice: 'purchasePrice',
  currentValue: 'currentValue',
  purchaseDate: 'purchaseDate',
  warrantyExpiry: 'warrantyExpiry',
  lastMaintenanceAt: 'lastMaintenanceAt',
  nextMaintenanceAt: 'nextMaintenanceAt',
  maintenanceIntervalDays: 'maintenanceIntervalDays',
  serialNumber: 'serialNumber',
  manufacturer: 'manufacturer',
  model: 'model',
  customFields: 'customFields',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssetHistoryScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  assetId: 'assetId',
  userId: 'userId',
  action: 'action',
  fromValue: 'fromValue',
  toValue: 'toValue',
  notes: 'notes',
  location: 'location',
  createdAt: 'createdAt'
};

exports.Prisma.RateLimitScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  buId: 'buId',
  key: 'key',
  limitPerMinute: 'limitPerMinute',
  limitPerHour: 'limitPerHour',
  limitPerDay: 'limitPerDay',
  enabled: 'enabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RateLimitUsageScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  buId: 'buId',
  key: 'key',
  windowStart: 'windowStart',
  windowType: 'windowType',
  count: 'count',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkOrderTimeEntryScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  workOrderId: 'workOrderId',
  userId: 'userId',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  durationMinutes: 'durationMinutes',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SyncQueueScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  deviceId: 'deviceId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  payload: 'payload',
  status: 'status',
  attempts: 'attempts',
  lastAttemptAt: 'lastAttemptAt',
  error: 'error',
  createdAt: 'createdAt',
  syncedAt: 'syncedAt'
};

exports.Prisma.Cleaning_eventsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  user_id: 'user_id',
  feature: 'feature',
  request_id: 'request_id',
  payload: 'payload',
  result: 'result',
  cost_cents: 'cost_cents',
  tokens_in: 'tokens_in',
  tokens_out: 'tokens_out',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Fencing_eventsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  user_id: 'user_id',
  feature: 'feature',
  request_id: 'request_id',
  payload: 'payload',
  result: 'result',
  cost_cents: 'cost_cents',
  tokens_in: 'tokens_in',
  tokens_out: 'tokens_out',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Work_ordersScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Work_order_eventsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Dvir_recordsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Dvir_defectsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Maintenance_ticketsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.AssetsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Asset_eventsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Qr_tagsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Migration_jobsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Migration_mappingsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Migration_resultsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Federation_domainsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Rate_limit_policiesScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Ai_sessionsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_cleaning_events_1ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_cleaning_events_2ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_fencing_events_1ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_fencing_events_2ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Concrete_eventsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_concrete_events_1ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_concrete_events_2ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Appliance_eventsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_appliance_events_1ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_appliance_events_2ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Mechanic_eventsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_mechanic_events_1ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_mechanic_events_2ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Windowdoor_eventsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_windowdoor_events_1ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_windowdoor_events_2ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Rolloff_eventsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_rolloff_events_1ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_rolloff_events_2ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Portajohn_eventsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_portajohn_events_1ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_portajohn_events_2ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Trucking_eventsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_trucking_events_1ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_trucking_events_2ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Infra_adoptionScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_infra_adoption_1ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.Idx_infra_adoption_2ScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.IFScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.TenantsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  plan: 'plan',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Business_unitsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  name: 'name',
  timezone: 'timezone',
  address: 'address',
  created_at: 'created_at'
};

exports.Prisma.Lines_of_businessScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  bu_id: 'bu_id',
  key: 'key',
  enabled: 'enabled',
  config: 'config',
  created_at: 'created_at'
};

exports.Prisma.Vendor_rolesScalarFieldEnum = {
  id: 'id',
  key: 'key',
  description: 'description'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  email: 'email',
  password_hash: 'password_hash',
  role: 'role',
  role_scope: 'role_scope',
  audience: 'audience',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.Fleet_vehiclesScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  bu_id: 'bu_id',
  asset_tag: 'asset_tag',
  vin: 'vin',
  plate: 'plate',
  make: 'make',
  dot_number: 'dot_number',
  odometer: 'odometer',
  status: 'status',
  metadata: 'metadata',
  created_at: 'created_at'
};

exports.Prisma.Fleet_maintenance_ticketsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  vehicle_id: 'vehicle_id',
  opened_by: 'opened_by',
  assigned_to: 'assigned_to',
  title: 'title',
  description: 'description',
  severity: 'severity',
  status: 'status',
  dvir_ref: 'dvir_ref',
  opened_at: 'opened_at',
  closed_at: 'closed_at'
};

exports.Prisma.Integration_configsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  type: 'type',
  status: 'status',
  config: 'config',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Geotab_dvir_logsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  device_id: 'device_id',
  driver_id: 'driver_id',
  vehicle_ref: 'vehicle_ref',
  defects: 'defects',
  certified_at: 'certified_at',
  status: 'status',
  raw: 'raw'
};

exports.Prisma.Holman_fuel_transactionsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  vehicle_ref: 'vehicle_ref',
  driver_pin: 'driver_pin',
  total_cents: 'total_cents',
  odometer: 'odometer',
  vendor: 'vendor',
  purchased_at: 'purchased_at',
  raw: 'raw'
};

exports.Prisma.Pricing_catalogScalarFieldEnum = {
  id: 'id',
  key: 'key',
  list_price_cents: 'list_price_cents',
  adoption_discount_eligible: 'adoption_discount_eligible'
};

exports.Prisma.Tenant_entitlementsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  key: 'key',
  enabled: 'enabled',
  quota: 'quota',
  meta: 'meta'
};

exports.Prisma.Credits_ledgerScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  key: 'key',
  delta_cents: 'delta_cents',
  reason: 'reason',
  created_at: 'created_at'
};

exports.Prisma.Usage_ledgerScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  key: 'key',
  quantity: 'quantity',
  cost_cents: 'cost_cents',
  context: 'context',
  created_at: 'created_at'
};

exports.Prisma.Audit_logsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  user_id: 'user_id',
  role: 'role',
  action: 'action',
  resource: 'resource',
  meta: 'meta',
  created_at: 'created_at'
};

exports.Prisma.Crm_leadsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  bu_id: 'bu_id',
  first_name: 'first_name',
  email: 'email',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.Crm_orgsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  name: 'name',
  created_at: 'created_at'
};

exports.Prisma.Crm_contactsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  org_id: 'org_id',
  first_name: 'first_name',
  is_primary: 'is_primary',
  created_at: 'created_at'
};

exports.Prisma.Crm_oppsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  org_id: 'org_id',
  contact_id: 'contact_id',
  title: 'title',
  created_at: 'created_at'
};

exports.Prisma.Schedule_jobsScalarFieldEnum = {
  id: 'id',
  org_id: 'org_id',
  status: 'status'
};

exports.Prisma.Schedule_visitsScalarFieldEnum = {
  id: 'id',
  job_id: 'job_id',
  scheduled_at: 'scheduled_at',
  status: 'status'
};

exports.Prisma.Billing_estimatesScalarFieldEnum = {
  id: 'id',
  org_id: 'org_id',
  created_at: 'created_at'
};

exports.Prisma.Billing_estimate_linesScalarFieldEnum = {
  id: 'id',
  sku: 'sku'
};

exports.Prisma.Billing_invoicesScalarFieldEnum = {
  id: 'id',
  org_id: 'org_id',
  created_at: 'created_at'
};

exports.Prisma.Billing_invoice_linesScalarFieldEnum = {
  id: 'id',
  sku: 'sku'
};

exports.Prisma.Billing_paymentsScalarFieldEnum = {
  id: 'id',
  amount_cents: 'amount_cents'
};

exports.Prisma.Inventory_itemsScalarFieldEnum = {
  id: 'id',
  sku: 'sku'
};

exports.Prisma.Inventory_binsScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.Inventory_stockScalarFieldEnum = {
  id: 'id',
  item_id: 'item_id',
  bin_id: 'bin_id'
};

exports.Prisma.Subs_vendorsScalarFieldEnum = {
  id: 'id',
  email: 'email'
};

exports.Prisma.Subs_work_ordersScalarFieldEnum = {
  id: 'id',
  job_id: 'job_id'
};

exports.Prisma.Subs_milestonesScalarFieldEnum = {
  id: 'id',
  title: 'title'
};

exports.Prisma.Subs_payoutsScalarFieldEnum = {
  id: 'id',
  amount_cents: 'amount_cents'
};

exports.Prisma.Portal_sessionsScalarFieldEnum = {
  id: 'id',
  token: 'token'
};

exports.Prisma.Finance_cost_centersScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  bu_id: 'bu_id',
  name: 'name',
  lob: 'lob',
  created_at: 'created_at'
};

exports.Prisma.Finance_budgetsScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  cost_center_id: 'cost_center_id',
  period_d: 'period_d',
  amount_cents: 'amount_cents',
  created_at: 'created_at'
};

exports.Prisma.Time_entriesScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  user_id: 'user_id',
  visit_id: 'visit_id',
  started_at: 'started_at',
  ended_at: 'ended_at',
  notes: 'notes'
};

exports.Prisma.Integrations_vendor_tokensScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  vendor: 'vendor',
  data: 'data',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CrmOpportunityScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CrmContactScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CrmOrganizationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RateLimitPolicyScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantUsageWindowScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScalingEventScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AiPlan = exports.$Enums.AiPlan = {
  BASE: 'BASE',
  PRO: 'PRO',
  ELITE: 'ELITE'
};

exports.Role = exports.$Enums.Role = {
  OWNER: 'OWNER',
  MANAGER: 'MANAGER',
  STAFF: 'STAFF',
  ACCOUNTANT: 'ACCOUNTANT',
  EMPLOYEE: 'EMPLOYEE'
};

exports.LeadSource = exports.$Enums.LeadSource = {
  COLD: 'COLD',
  HOT: 'HOT',
  RFP: 'RFP',
  MANUAL_EMPLOYEE_REFERRAL: 'MANUAL_EMPLOYEE_REFERRAL',
  MANUAL_EXISTING_CUSTOMER: 'MANUAL_EXISTING_CUSTOMER',
  MANUAL_NEW_CUSTOMER: 'MANUAL_NEW_CUSTOMER',
  MANUAL_OTHER: 'MANUAL_OTHER',
  SYSTEM: 'SYSTEM',
  EMPLOYEE_REFERRAL: 'EMPLOYEE_REFERRAL',
  MANUAL: 'MANUAL',
  LSA: 'LSA'
};

exports.LeadStatus = exports.$Enums.LeadStatus = {
  NEW: 'NEW',
  CONTACTED: 'CONTACTED',
  QUALIFIED: 'QUALIFIED',
  MEETING_SCHEDULED: 'MEETING_SCHEDULED',
  PROPOSAL_SENT: 'PROPOSAL_SENT',
  NEGOTIATION: 'NEGOTIATION',
  WON: 'WON',
  CONVERTED: 'CONVERTED',
  LOST: 'LOST',
  NURTURING: 'NURTURING',
  FOLLOW_UP: 'FOLLOW_UP',
  ON_HOLD: 'ON_HOLD',
  UNRESPONSIVE: 'UNRESPONSIVE'
};

exports.ValueType = exports.$Enums.ValueType = {
  RELATIONSHIP: 'RELATIONSHIP',
  JOB: 'JOB'
};

exports.LedgerType = exports.$Enums.LedgerType = {
  CONVERSION_FEE: 'CONVERSION_FEE',
  PACK_PURCHASE: 'PACK_PURCHASE'
};

exports.ElevationStatus = exports.$Enums.ElevationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  TERMINATED: 'TERMINATED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.PricingModel = exports.$Enums.PricingModel = {
  PER_LEAD_FIXED: 'PER_LEAD_FIXED',
  TIERED: 'TIERED',
  SUBSCRIPTION: 'SUBSCRIPTION',
  HYBRID: 'HYBRID'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  CALL_OUTBOUND: 'CALL_OUTBOUND',
  CALL_INBOUND: 'CALL_INBOUND',
  EMAIL_SENT: 'EMAIL_SENT',
  EMAIL_RECEIVED: 'EMAIL_RECEIVED',
  MEETING_SCHEDULED: 'MEETING_SCHEDULED',
  MEETING_COMPLETED: 'MEETING_COMPLETED',
  PROPOSAL_SENT: 'PROPOSAL_SENT',
  CONTRACT_SENT: 'CONTRACT_SENT',
  FOLLOW_UP: 'FOLLOW_UP',
  NOTE: 'NOTE',
  TASK_CREATED: 'TASK_CREATED',
  TASK_COMPLETED: 'TASK_COMPLETED',
  STATUS_CHANGED: 'STATUS_CHANGED',
  DOCUMENT_SHARED: 'DOCUMENT_SHARED',
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED'
};

exports.TaskPriority = exports.$Enums.TaskPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  OVERDUE: 'OVERDUE'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  ON_HOLD: 'ON_HOLD',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.JobPriority = exports.$Enums.JobPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.TimesheetStatus = exports.$Enums.TimesheetStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.ChecklistStatus = exports.$Enums.ChecklistStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  SKIPPED: 'SKIPPED'
};

exports.IssueSeverity = exports.$Enums.IssueSeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.IssueStatus = exports.$Enums.IssueStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.MediaType = exports.$Enums.MediaType = {
  PHOTO: 'PHOTO',
  VIDEO: 'VIDEO',
  DOCUMENT: 'DOCUMENT',
  AUDIO: 'AUDIO',
  OTHER: 'OTHER'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

exports.SecurityIncidentType = exports.$Enums.SecurityIncidentType = {
  CONSTRAINT_VIOLATION: 'CONSTRAINT_VIOLATION',
  SECURITY_VIOLATION: 'SECURITY_VIOLATION',
  ANOMALY_DETECTION: 'ANOMALY_DETECTION',
  FAILED_AUTHENTICATION: 'FAILED_AUTHENTICATION',
  UNAUTHORIZED_ACCESS: 'UNAUTHORIZED_ACCESS',
  DATA_BREACH: 'DATA_BREACH',
  SUSPICIOUS_ACTIVITY: 'SUSPICIOUS_ACTIVITY'
};

exports.SecuritySeverity = exports.$Enums.SecuritySeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.IncidentStatus = exports.$Enums.IncidentStatus = {
  OPEN: 'OPEN',
  INVESTIGATING: 'INVESTIGATING',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED',
  FALSE_POSITIVE: 'FALSE_POSITIVE'
};

exports.DeviceType = exports.$Enums.DeviceType = {
  DESKTOP: 'DESKTOP',
  MOBILE: 'MOBILE',
  TABLET: 'TABLET',
  UNKNOWN: 'UNKNOWN'
};

exports.LockoutType = exports.$Enums.LockoutType = {
  SECURITY_VIOLATION: 'SECURITY_VIOLATION',
  FAILED_ATTEMPTS: 'FAILED_ATTEMPTS',
  SUSPICIOUS_ACTIVITY: 'SUSPICIOUS_ACTIVITY',
  MANUAL_LOCKOUT: 'MANUAL_LOCKOUT',
  COMPLIANCE_VIOLATION: 'COMPLIANCE_VIOLATION'
};

exports.PolicyCategory = exports.$Enums.PolicyCategory = {
  AUTHENTICATION: 'AUTHENTICATION',
  SECURITY: 'SECURITY',
  COMPLIANCE: 'COMPLIANCE',
  NETWORK_SECURITY: 'NETWORK_SECURITY',
  EMERGENCY: 'EMERGENCY'
};

exports.FeatureCategory = exports.$Enums.FeatureCategory = {
  AI_ANALYTICS: 'AI_ANALYTICS',
  AUTOMATION: 'AUTOMATION',
  COMMUNICATION: 'COMMUNICATION',
  INTEGRATION: 'INTEGRATION',
  MOBILE: 'MOBILE',
  DEVELOPER_TOOLS: 'DEVELOPER_TOOLS',
  MARKETING: 'MARKETING'
};

exports.IntegrationType = exports.$Enums.IntegrationType = {
  SSO_SAML: 'SSO_SAML',
  SSO_OIDC: 'SSO_OIDC',
  SCIM: 'SCIM',
  WEBHOOK: 'WEBHOOK',
  OAUTH_APP: 'OAUTH_APP',
  API_INTEGRATION: 'API_INTEGRATION',
  ACCOUNTING: 'ACCOUNTING',
  COMMUNICATION: 'COMMUNICATION'
};

exports.SupportSessionType = exports.$Enums.SupportSessionType = {
  READ_ONLY: 'READ_ONLY',
  IMPERSONATION: 'IMPERSONATION',
  BREAK_GLASS: 'BREAK_GLASS',
  TROUBLESHOOTING: 'TROUBLESHOOTING'
};

exports.SupportSessionStatus = exports.$Enums.SupportSessionStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  ENDED: 'ENDED',
  CANCELLED: 'CANCELLED'
};

exports.AuditSeverity = exports.$Enums.AuditSeverity = {
  INFO: 'INFO',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  CRITICAL: 'CRITICAL'
};

exports.AuditCategory = exports.$Enums.AuditCategory = {
  GENERAL: 'GENERAL',
  AUTHENTICATION: 'AUTHENTICATION',
  AUTHORIZATION: 'AUTHORIZATION',
  DATA_ACCESS: 'DATA_ACCESS',
  DATA_MODIFICATION: 'DATA_MODIFICATION',
  POLICY_CHANGE: 'POLICY_CHANGE',
  ADMIN_ACTION: 'ADMIN_ACTION',
  SECURITY_EVENT: 'SECURITY_EVENT',
  FINANCIAL: 'FINANCIAL',
  SYSTEM: 'SYSTEM',
  COMPLIANCE: 'COMPLIANCE',
  AUTH: 'AUTH',
  DATA: 'DATA',
  SECURITY: 'SECURITY'
};

exports.WebhookDeliveryStatus = exports.$Enums.WebhookDeliveryStatus = {
  PENDING: 'PENDING',
  DELIVERED: 'DELIVERED',
  FAILED: 'FAILED',
  RETRYING: 'RETRYING'
};

exports.BackupType = exports.$Enums.BackupType = {
  FULL: 'FULL',
  INCREMENTAL: 'INCREMENTAL',
  DIFFERENTIAL: 'DIFFERENTIAL'
};

exports.BackupStatus = exports.$Enums.BackupStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.Prisma.ModelName = {
  Org: 'Org',
  IndustryPack: 'IndustryPack',
  Capability: 'Capability',
  IndustryCapability: 'IndustryCapability',
  User: 'User',
  UserSession: 'UserSession',
  UserTwoFactor: 'UserTwoFactor',
  ProviderSettings: 'ProviderSettings',
  ProviderAuditLog: 'ProviderAuditLog',
  ThemeConfig: 'ThemeConfig',
  ThemeUsage: 'ThemeUsage',
  Lead: 'Lead',
  Customer: 'Customer',
  Opportunity: 'Opportunity',
  Quote: 'Quote',
  Contact: 'Contact',
  CrmTask: 'CrmTask',
  CrmNote: 'CrmNote',
  CrmFile: 'CrmFile',
  Organization: 'Organization',
  ConversionAudit: 'ConversionAudit',
  Invoice: 'Invoice',
  Payment: 'Payment',
  Rfp: 'Rfp',
  Job: 'Job',
  Referral: 'Referral',
  BillingLedger: 'BillingLedger',
  LeadInvoice: 'LeadInvoice',
  LeadInvoiceLine: 'LeadInvoiceLine',
  AuditLog: 'AuditLog',
  RbacPermission: 'RbacPermission',
  RbacRole: 'RbacRole',
  RbacRolePermission: 'RbacRolePermission',
  RbacUserRole: 'RbacUserRole',
  RoleVersion: 'RoleVersion',
  RoleTemplate: 'RoleTemplate',
  PermissionBundle: 'PermissionBundle',
  RoleScope: 'RoleScope',
  RoleReview: 'RoleReview',
  ProvisioningFlow: 'ProvisioningFlow',
  TemporaryElevation: 'TemporaryElevation',
  ProviderConfig: 'ProviderConfig',
  PricingPlan: 'PricingPlan',
  LeadActivity: 'LeadActivity',
  LeadTask: 'LeadTask',
  AiUsageEvent: 'AiUsageEvent',
  AiMonthlySummary: 'AiMonthlySummary',
  EmployeeProfile: 'EmployeeProfile',
  WorkOrder: 'WorkOrder',
  JobSite: 'JobSite',
  JobAssignment: 'JobAssignment',
  TimesheetEntry: 'TimesheetEntry',
  JobChecklistItem: 'JobChecklistItem',
  IssueReport: 'IssueReport',
  MediaAsset: 'MediaAsset',
  TrainingModule: 'TrainingModule',
  TrainingCompletion: 'TrainingCompletion',
  ApprovalRequest: 'ApprovalRequest',
  SecurityIncident: 'SecurityIncident',
  DeviceAccess: 'DeviceAccess',
  UserLockout: 'UserLockout',
  SecurityPolicy: 'SecurityPolicy',
  FeatureModule: 'FeatureModule',
  FeatureUsage: 'FeatureUsage',
  OrganizationBudget: 'OrganizationBudget',
  Integration: 'Integration',
  SupportSession: 'SupportSession',
  AuditEvent: 'AuditEvent',
  AppEvent: 'AppEvent',
  FeatureRegistry: 'FeatureRegistry',
  OrgFeatureState: 'OrgFeatureState',
  DelegationGrant: 'DelegationGrant',
  AiActionLog: 'AiActionLog',
  AiDocChunk: 'AiDocChunk',
  WebhookEndpoint: 'WebhookEndpoint',
  WebhookEvent: 'WebhookEvent',
  WebhookDelivery: 'WebhookDelivery',
  EncryptionKey: 'EncryptionKey',
  Backup: 'Backup',
  TenantRegistration: 'TenantRegistration',
  LeadSourceConfig: 'LeadSourceConfig',
  JobTemplate: 'JobTemplate',
  IdempotencyKey: 'IdempotencyKey',
  StripeEvent: 'StripeEvent',
  TenantStripeConnect: 'TenantStripeConnect',
  AiPowerProfile: 'AiPowerProfile',
  AiTask: 'AiTask',
  CreditLedger: 'CreditLedger',
  AIUsageLog: 'AIUsageLog',
  UsageMeter: 'UsageMeter',
  VerticalConfig: 'VerticalConfig',
  TrialConfig: 'TrialConfig',
  JobTicket: 'JobTicket',
  JobLog: 'JobLog',
  JobCompletion: 'JobCompletion',
  JobAnomaly: 'JobAnomaly',
  TenantDomain: 'TenantDomain',
  TenantProfitability: 'TenantProfitability',
  SystemNotice: 'SystemNotice',
  AiGoldenDataset: 'AiGoldenDataset',
  AiEvaluation: 'AiEvaluation',
  AiModelVersion: 'AiModelVersion',
  BusinessUnit: 'BusinessUnit',
  LineOfBusiness: 'LineOfBusiness',
  VendorRole: 'VendorRole',
  FleetVehicle: 'FleetVehicle',
  FleetMaintenanceTicket: 'FleetMaintenanceTicket',
  IntegrationConfig: 'IntegrationConfig',
  GeotabDvirLog: 'GeotabDvirLog',
  HolmanFuelTransaction: 'HolmanFuelTransaction',
  PricingCatalogItem: 'PricingCatalogItem',
  TenantEntitlement: 'TenantEntitlement',
  CreditsLedgerEntry: 'CreditsLedgerEntry',
  UsageLedgerEntry: 'UsageLedgerEntry',
  AuditLog2: 'AuditLog2',
  Note: 'Note',
  Attachment: 'Attachment',
  Asset: 'Asset',
  AssetHistory: 'AssetHistory',
  RateLimit: 'RateLimit',
  RateLimitUsage: 'RateLimitUsage',
  WorkOrderTimeEntry: 'WorkOrderTimeEntry',
  SyncQueue: 'SyncQueue',
  cleaning_events: 'cleaning_events',
  fencing_events: 'fencing_events',
  work_orders: 'work_orders',
  work_order_events: 'work_order_events',
  dvir_records: 'dvir_records',
  dvir_defects: 'dvir_defects',
  maintenance_tickets: 'maintenance_tickets',
  assets: 'assets',
  asset_events: 'asset_events',
  qr_tags: 'qr_tags',
  migration_jobs: 'migration_jobs',
  migration_mappings: 'migration_mappings',
  migration_results: 'migration_results',
  federation_domains: 'federation_domains',
  rate_limit_policies: 'rate_limit_policies',
  ai_sessions: 'ai_sessions',
  idx_cleaning_events_1: 'idx_cleaning_events_1',
  idx_cleaning_events_2: 'idx_cleaning_events_2',
  idx_fencing_events_1: 'idx_fencing_events_1',
  idx_fencing_events_2: 'idx_fencing_events_2',
  concrete_events: 'concrete_events',
  idx_concrete_events_1: 'idx_concrete_events_1',
  idx_concrete_events_2: 'idx_concrete_events_2',
  appliance_events: 'appliance_events',
  idx_appliance_events_1: 'idx_appliance_events_1',
  idx_appliance_events_2: 'idx_appliance_events_2',
  mechanic_events: 'mechanic_events',
  idx_mechanic_events_1: 'idx_mechanic_events_1',
  idx_mechanic_events_2: 'idx_mechanic_events_2',
  windowdoor_events: 'windowdoor_events',
  idx_windowdoor_events_1: 'idx_windowdoor_events_1',
  idx_windowdoor_events_2: 'idx_windowdoor_events_2',
  rolloff_events: 'rolloff_events',
  idx_rolloff_events_1: 'idx_rolloff_events_1',
  idx_rolloff_events_2: 'idx_rolloff_events_2',
  portajohn_events: 'portajohn_events',
  idx_portajohn_events_1: 'idx_portajohn_events_1',
  idx_portajohn_events_2: 'idx_portajohn_events_2',
  trucking_events: 'trucking_events',
  idx_trucking_events_1: 'idx_trucking_events_1',
  idx_trucking_events_2: 'idx_trucking_events_2',
  infra_adoption: 'infra_adoption',
  idx_infra_adoption_1: 'idx_infra_adoption_1',
  idx_infra_adoption_2: 'idx_infra_adoption_2',
  IF: 'IF',
  tenants: 'tenants',
  business_units: 'business_units',
  lines_of_business: 'lines_of_business',
  vendor_roles: 'vendor_roles',
  users: 'users',
  fleet_vehicles: 'fleet_vehicles',
  fleet_maintenance_tickets: 'fleet_maintenance_tickets',
  integration_configs: 'integration_configs',
  geotab_dvir_logs: 'geotab_dvir_logs',
  holman_fuel_transactions: 'holman_fuel_transactions',
  pricing_catalog: 'pricing_catalog',
  tenant_entitlements: 'tenant_entitlements',
  credits_ledger: 'credits_ledger',
  usage_ledger: 'usage_ledger',
  audit_logs: 'audit_logs',
  crm_leads: 'crm_leads',
  crm_orgs: 'crm_orgs',
  crm_contacts: 'crm_contacts',
  crm_opps: 'crm_opps',
  schedule_jobs: 'schedule_jobs',
  schedule_visits: 'schedule_visits',
  billing_estimates: 'billing_estimates',
  billing_estimate_lines: 'billing_estimate_lines',
  billing_invoices: 'billing_invoices',
  billing_invoice_lines: 'billing_invoice_lines',
  billing_payments: 'billing_payments',
  inventory_items: 'inventory_items',
  inventory_bins: 'inventory_bins',
  inventory_stock: 'inventory_stock',
  subs_vendors: 'subs_vendors',
  subs_work_orders: 'subs_work_orders',
  subs_milestones: 'subs_milestones',
  subs_payouts: 'subs_payouts',
  portal_sessions: 'portal_sessions',
  finance_cost_centers: 'finance_cost_centers',
  finance_budgets: 'finance_budgets',
  time_entries: 'time_entries',
  integrations_vendor_tokens: 'integrations_vendor_tokens',
  CrmOpportunity: 'CrmOpportunity',
  CrmContact: 'CrmContact',
  CrmOrganization: 'CrmOrganization',
  RateLimitPolicy: 'RateLimitPolicy',
  TenantUsageWindow: 'TenantUsageWindow',
  ScalingEvent: 'ScalingEvent'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
